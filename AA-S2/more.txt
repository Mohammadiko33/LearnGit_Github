1. برای نمایش پوشه مخفی گیت در و.ی اس کد فقط کافیه وارد 
    CTRL + P 
        سرچ میکنیم
            Preferences: Open User Settings (JSON)
            و در خطی که نوشته
            "files.exclude": {
                "**/.git": false
                "**/.DS_Store": false
            },
            و مقدار گیت رو تغییر میدهید به 
            "**/.git": true
------------------------------------------------------------
2. git status 
    برای برسی وعضیت این کامند زده میشه
------------------------------------------------------------
3. برای در اوردن یک فایل از استیج کافیه کامند زیر رو بزنیم
    git rm --cached [file name]
        rm => remove
        اگه فایل جلوی اسمش بجای حرف اینگلیسی ای نوشت یو درسته
------------------------------------------------------------
4. git log --stat
    برای دیدن امار دقیق تر از این کامند استفاده میکنیم
------------------------------------------------------------
5. git log --graph
    شاخه بندی پروژه رو نشون میده
    git log --graph --oneline
        همون قبلی ولی توی یک خط خلاصه
------------------------------------------------------------
6. git log after="25-06-08"
    میگم کامیت های بعد از این تاریخ رو به ما بده
------------------------------------------------------------
7. git log author="[user name]"
    میگیم کایمت های این شخص رو نشونم بده
------------------------------------------------------------*
8. git commit -am "[massage commit2]" / git commit -a -m "[massage commit2]"
    میتونیم بدون اینکه به استیج وارد کنیم وارد گیت ریپازیتوری بکنیم
------------------------------------------------------------*
9. برای متوجه شدن از اینکه توی هر فایل چه تغییراتی کرده یا اینکه بخایم بفهمیم کدوم فایل چه تغییراتی کرده
    git show [commit cash]
    کلمه 
    diff => difrance 
    @@ -0,0 + 1,3@@
    خط بالا یعنی صفر خط بوده اول بعد سه خط شده
        اگه ایدی رو ندیم اخرین کامیت رو برمیگردونه
------------------------------------------------------------*
10. git config --local alias.lgo "log --oneline"
    کلمه ایلیس یعنی نام مستعار
    اینجا میگیم برای کانفیگ های گیت این پروژم نام مستعار تعیینن بکنم به اسم ال جی او 
    بعد داخل کوتیشن میگیم اگه کامند ال جی او اجرا شد منظورم این بوده این کامند داخل 
    و اگر بنویسیم
    git lgo 
    دقیقا مشابه کد زیر عمل میکنه
        git log --oneline

        مثال دیگشم برای برای این خط کد هست
        git commit -am "[massage commit]"
        میایم مینویسیم
        git config --local alias.am "commit -am"
        و بعد از اجراش ما هر دفعه اجرا کنیم کامند زیر رو
        git am 
        برابر هست با این کامیت
        git add .
        git commit -m


        اگر خاستیم این کامند رو برای تمامی پروژه ها استفاده بکنیم فقط کافیه بجای لوکال بنویسیم گلوبال و برای تمامی پروژه ها این کامیت ثبت میشه
        git config --global alias.am "commit -am"
------------------------------------------------------------*
11. git switch -c [branch name]
    این کامند یعنی من میخام اول یک همچین برنچی اول ساخته بشه و سپس سویچ بشه روی اون برنچ
------------------------------------------------------------
12. git switch -d [branch name]
    برای حذف برنچ از یک همچین کامندی استفاده میکنیم 

    نکته اگر ما روی همون برنچی باشیم که بخایم حذفش بکنیم ترمینال خطا میده

    اگه بگه مطمعن هستید برای حذف این کامند رو اجرا کنید
    git switch -D [branch name]
------------------------------------------------------------
نکته : قبل ساخت برنچ اول سویچ بکنیم روی مستر و اگر روی شاخه باشه از شاخه پول انجام میده برداشته میکنه
------------------------------------------------------------
13. برای تغییر نیم برنچ کافیه کامند زیر رو اجرا کنیم
    git branch -m [new branch name]
    نکته برای تغییر نام حتما باید روی همون برنچ باشیم
------------------------------------------------------------
نکته : زمانی که ما داریم روی یک شاخه دیگه کار میکنیم مثل شاخه تست فلان فریمورک 
اگه این فریمورک تغییراتش باعث تغییر شاخه مستر بشه یعنی جایگزینی داشته باشه اون شاخه بهش میگن
non fast-forward
ولی اگه اون شاخه تغییراتش فقط چیز های جدید اضافه بشه و جایگزینی نداشته باشه بهش میگن
fast-forward
------------------------------------------------------------
14. Accept Both Changes
    در کانفیلگهنگام مرج شاخه این گزینه به این معنسات که :ممم
    میشه هر دوتا کد رو برام نگه دار
------------------------------------------------------------
15. Compare Changes
    کلمه کمپار به معنای مقایس یعنی بیای این دوتا رو برام مقایسه کن
------------------------------------------------------------
16. git diff 
    برای مقایسه دوحالت از این کامند استفاده میکنیم
    اگه مقدار دیفالتش رو بنویسیم میاد یک مقایسه ای بین ورکینگ داریکتوری و استیجینگ اریا انجام میده که ببینه اینا جه تغییراتی نسبت به هم دارن
    نکته : هرجا که من از علامت --- استفاده بکنم منظورم همون فایل استیجنگ اریا هست
    هر کجا هم بنویسم +++ منظورم ورکینگ داریکتوری یا لوکال ما هستش یا دابلیو دی هست

    git diff --stage
    با این کامند میشه اخرین تغییرات رو با استیج مقایسه کرد
    من هر فایلی که توی استیج داشته باشم میاد با اخرین نسخه کایمتم مقایسه میکنه

    git diff head
    ما میتونیم با کمک این کامند به اسم گیت دیو هد میتونیم اخرین کامیتمون رو نسبت به کد هایی که العان توی پروژمون نوشتیم مقایسشون بکنیم

    git diff [commit cash 1]..[commit cash 2]
    کامند بالا برای مقایسه دوتا کامیت هستش

    git diff [commit cash 1]..[commit cash 2] [file name]
    اینم مثل قبلی برای مقایسه دوتا کامیت هست اما با این تقاوت که میشه مقایسه رو روی یک فایل تمرکز کنیم یعنی فقط یک فایل رو توی کامیت ها مقایسه کنیم

    git diff [branch 1]..[branch 2]
    برای مقایسه دوتا برنچ از این کامند استفاده میکنیم
------------------------------------------------------------
17. به جابه جایی هد میگن دیتچ کردن
------------------------------------------------------------
18. برای مشاهده تمامی کامیت ها بدون فیلتر از کامند زریر استفاده میکنیم
    git log --oneline --all
------------------------------------------------------------
19. واگر ما خاستیم فقط برگرده به کامیت و فایل مورد نظر میایم از کامند زیر استفاده میکنیم
    git checkout [commit cash] [file name]
------------------------------------------------------------
20. برای تغییر کامیت ما به سه تا پایین تر هد از کامند زیر استفاده میکنیم
    git checkout HEAD~3
    یعنی برو ببین هد کجاست و برو به کامیت سه تا پایین ترش

    git checkout HEAD app.js
    میره توی تغییرات فایل اپ دات جی اس بخش هد و چک اوتش میکنه

    git checkout HEAD .
    یعنی چک اون بکن همه فایل های هد رو
    
------------------------------------------------------------
نکته : در برنامه نویسی علامت ها . و * به معنای همه هست
------------------------------------------------------------ *
21. git restore app.js
    دقیقا مثل چکاوت هد عمل میکنه
    اگه بخایم به دوتا کاربردش اشاره کنیم 
    21.1. تغییرات دابلیو دی یا ورکینگ دایرکتوری حذفشون کرده باشیم دبکوردشون پاکشون کرده باشیم
    21.2. کاربرد بعدیش هم این هست که با کامندی به اسم دشت دشت استیج فایلی که توی استیج هست از توی استیج درش بیاریم
    21.3. یکی دیگه از کاربرداش اینکه میتونیم برگردیم به تغییرات توی کامیت های قبلیمون اجراشون کردیم کامیتشون کردیم مثل کامیتی که دو روز پیش دو هفته پیش مثلا داشتیم
    مثل همون چک اوت هد عمل میکنه اما دیگه هد دیپچ نمیشه
    ری استور بای دیفالت روی هد قرار میگیره

    git restore --source [commit cash] [file name]
    یعنی فایل من توی این کامیت ایدی سورسش هرچی بخاد بوده باشه همونو من میخام
------------------------------------------------------------ *
22. وقتی ما یک فایل اشتباهی ساختیم و اضافه کردیم به استیح میتونیم با استفاده از دستور 
    git clean 
    اون فایل رو حذف کنیم
    git clean -h || -h => help 
    دشت اچ مخفف هلپ هست
    
    git clean -f -d [file name]
    برای اینکه بخای یک فایل رو از ریشه حذف بکنیم از فلگ دشت اف استفاده میشه
    و برای اینکه بخایماز کل پروژه حذف کنیم از فلش  استفاده میکنیم
------------------------------------------------------------
23. git reset
    گیت ریست هم دقیقا مثل چک اوت و ریاستور عمل میکنه

    در گیت ریست ما سه تا فلگ داریم

    git reset --soft [commit cash]
    فلگ سافت : فقط میاد برای ما همین ریپازیتوری ما رو یا کامیت هیستوری رو تغییر میده اگر از سافت استفاده بکنیم دیگه کامیت های بعد از کامیتی که ریست کردیم دیگه وجود نداره
    و نکته اینکه هر فایلی که توی کامیت های بعدی بوده باشه برمیگرده به استیج من 

    git reset [commit cash] // git reset --mixed [commit cash]
    فلگ میکس : فقط برای ما کامیت هیستوری رو به علاوه استیج تغییر میده

    git reset --hard [commit cash]
    فلگ هارد : مثل قبلی ها عمل میکنه اما روی ورکینگ داریکتوری هم تاثیر میزاره نسبت به کامیتی که من میخام بهش برگردم
------------------------------------------------------------
24. git revert [commit cash]
    گیت ریورت برای ما یجورایی کار همون گیت ریست هارد رو انجام میده میده
    اما هیچگونه کاری با حذف کامیت هیستوری ما نداره بلکه خودش میاد با کامند گیت مرج یک کامیت جدیدی رو برای ما ایجادش میکنه العان ما دوسه تا کامیت برگشتیم عقب تر 
    نکته : بیشنر برای کامیت های اخریمون استفاده میشهوگرنه یک کامیتی که ده روز پیش برای پروژمون اضافه کردیم قطعا بعد از اون کامیتمون کامیت هایی هستن که به هون کامیت وابسته باشن
    اگه بخان گیت کامیت های قبلیمون ریورت بشن اون موقع نیازه که از گیت ریست استفاده بشه
------------------------------------------------------------
25. git remote remove [name remote default value is origin]
    برای حذف یک ریموت استفاده میشه
------------------------------------------------------------
26. git push -u origin master
    این یعنی دفعات بعدی که من نوشتم گیت پوش خودت به صورت پیشفرض و دیفالت این اوریجین و مستر رو در نظر بگیر  
------------------------------------------------------------
27. git fetch [remote] [branch]
    ما شاید نیاز داشته باشیم اول ببینیم تغییرات چیا هستن اگه نیاز بود خودمون تغییراتی درونش اینجاد کرده باشیم و سپس بیایم 
    با برنچ مستر و مین پروژمونمرج انجام بدیم براش
    اول اسم ریموت رو مینویسیم و سپس جلوش اسم برنچی که مخایم تغییراتهمون برنچ رو که میخایم اسم اون برنچ رو میایم بهش پاس میدیم
    ولی اگه ما مقدار دیفالت پاس ندیم مثل گیت پول و مقادیر دیفالت به این شکل هست
    git fetch origin master
    بجای مستر همون برنچی رو نظر میگیره که روش هستیم

    گیت فچ میاد برای ما اول تغییرات رو روی یک برنچ دیگه ای بهمون میده که اول دسترسی برسی اون تغییرات داده بشه و سچس خودمون بیایم مرج رو انجام بدیم

    git pull === git fetch & git merge
    ما زمانی که میایم از گیت پول استفاده میکنیم خودش میاد برای ما فچ رو انجام میده وسپس تغییراتی که فچ شده رو میاد مرج میکنه با برنچی که روش هستیم
    وسپس میاد برای ما کلا تغییرات ما به محض اینکه گیت پول انجام بدیم توی برنچ مین یا همون مسترقابل دسترس و قابل مشاهده و تغییر هستش

    اما زمانی که از گیت فچ استفاده میکنیم مرج نمیشه بلکه تغییرات ریموت ما که یکی از همکار ها میتونه تغییرات رو اعمال کرده باشه روی پروژه ما توی گیت هابمون بهمون روی برنچ ریموت دیگه ای میده
    که خودمون اول بتونیم تغییرات رو برسی بکنیم اگه نیاز بود بیایم چیکار بکنیم با مستر پروژمون مرج انجام بدیم
------------------------------------------------------------
28. git branch -r 
    این ار به این معناست که میخام برای من ریموت برنچ هام رو بهم نشون بدی
------------------------------------------------------------
29. git switch -c AuthFeature origin/master
    اینجا میگیم یک برنچ درست کن به اسم اسفیچر 
    روش سویچ بکن و
    العان من بهش بگم تغییرات این اوریجین مستر رو روی همین اوس فیچر داشته باشم
------------------------------------------------------------
در کل چونکه توی کامند گیت پول هم عمل مرج اتفاق می افتد عملا اینجا هم ممکنه که اگر تداخلی وجود داشته باشه بهتون ارور کانلیگ نشون داده بشه
------------------------------------------------------------
30. برای ساخت راحت تر و زیبا تر فایل رد می فقط کافیه وارد سایت زیر بشیم و ظاهری که میخایم رو درست کنیم
------------------------------------------------------------

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------